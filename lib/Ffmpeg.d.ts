import "hap-nodejs";
import { SessionInfo } from "./Session";
import { SnapshotRequest } from "./SnapshotRequest";
import { StreamController } from "./StreamController";
import { StreamRequest } from "./StreamRequest";
import { StreamResponse } from "./StreamResponse";
export default class FFMPEG implements HAPNodeJS.CameraSource {
    streamController: any;
    streamControllers: StreamController[];
    cameraControllers: any[];
    pendingSessions: SessionInfo[];
    ongoingSessions: SessionInfo[];
    services: HAPNodeJS.Service[];
    name: string;
    uuid: HAPNodeJS.uuid;
    service: any;
    private log;
    private vcodec;
    private videoProcessor;
    private fps;
    private maxBitrate;
    private debug;
    private ffmpegSource;
    private ffmpegImageSource;
    private stillImageFilename;
    constructor(uuidfunc: HAPNodeJS.uuid, hap: any, cameraConfig: any, log: (text: string) => void, videoProcessor: string, stillImageFilename: string);
    handleCloseConnection(connectionID: any): void;
    handleSnapshotRequest(request: SnapshotRequest, callback: (error: any, Buffer: any) => any): void;
    prepareStream(request: StreamRequest, callback: (response: StreamResponse) => void): void;
    handleStreamRequest(request: StreamRequest): void;
    createCameraControlService(): void;
    private _createStreamControllers;
}
export { FFMPEG };
